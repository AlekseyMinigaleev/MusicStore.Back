// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicStore.DB.DataAccess;

#nullable disable

namespace MusicStore.DB.Migrations
{
    [DbContext(typeof(MusicStoreDbContext))]
    [Migration("20231010115809_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EnsembleMusicant", b =>
                {
                    b.Property<Guid>("MusicantEnsemblesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MusicantsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MusicantEnsemblesId", "MusicantsId");

                    b.HasIndex("MusicantsId");

                    b.ToTable("EnsambleMusicant", (string)null);
                });

            modelBuilder.Entity("MusicStore.DB.Models.CompactDisk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CountInStock")
                        .HasColumnType("int");

                    b.Property<int>("CountSoldCurrentYear")
                        .HasColumnType("int");

                    b.Property<int?>("CountSoldPreviousYear")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ManufacturingCompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MusicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RetailPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WhosalerPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturingCompanyId");

                    b.HasIndex("MusicId");

                    b.ToTable("CompactDisk", (string)null);
                });

            modelBuilder.Entity("MusicStore.DB.Models.Ensemble", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ComposerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrchestraConductorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PerformanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ComposerId");

                    b.HasIndex("LeaderId");

                    b.HasIndex("OrchestraConductorId");

                    b.ToTable("Ensemble", (string)null);
                });

            modelBuilder.Entity("MusicStore.DB.Models.EnsembleMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronomyc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EnsembleMembers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("EnsembleMember");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MusicStore.DB.Models.ManufacturingCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WhosalerPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ManufactoringCompany", (string)null);
                });

            modelBuilder.Entity("MusicStore.DB.Models.Music", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Music", (string)null);
                });

            modelBuilder.Entity("MusicStore.DB.Models.MusicalMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Arrangement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<string>("Dynamics")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interpretation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PerformanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Tempo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PerformanceId")
                        .IsUnique();

                    b.ToTable("MusicalMetadatas");
                });

            modelBuilder.Entity("MusicStore.DB.Models.Performance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MusicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MusicId");

                    b.ToTable("Performance", (string)null);
                });

            modelBuilder.Entity("MusicStore.DB.Models.Musicant", b =>
                {
                    b.HasBaseType("MusicStore.DB.Models.EnsembleMember");

                    b.Property<string>("MusicalInstrument")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Musicant");
                });

            modelBuilder.Entity("EnsembleMusicant", b =>
                {
                    b.HasOne("MusicStore.DB.Models.Ensemble", null)
                        .WithMany()
                        .HasForeignKey("MusicantEnsemblesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicStore.DB.Models.Musicant", null)
                        .WithMany()
                        .HasForeignKey("MusicantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicStore.DB.Models.CompactDisk", b =>
                {
                    b.HasOne("MusicStore.DB.Models.ManufacturingCompany", "ManufacturingCompany")
                        .WithMany("ManufacturedDisks")
                        .HasForeignKey("ManufacturingCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicStore.DB.Models.Music", "Music")
                        .WithMany("CompactDisks")
                        .HasForeignKey("MusicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ManufacturingCompany");

                    b.Navigation("Music");
                });

            modelBuilder.Entity("MusicStore.DB.Models.Ensemble", b =>
                {
                    b.HasOne("MusicStore.DB.Models.EnsembleMember", "Composer")
                        .WithMany("ComposerEnsembles")
                        .HasForeignKey("ComposerId")
                        .HasConstraintName("FK_Ensemble_EnsembleMembers_Composer");

                    b.HasOne("MusicStore.DB.Models.EnsembleMember", "Leader")
                        .WithMany("LeaderEnsembles")
                        .HasForeignKey("LeaderId")
                        .HasConstraintName("FK_Ensemble_EnsembleMembers_Leader");

                    b.HasOne("MusicStore.DB.Models.EnsembleMember", "OrchestraConductor")
                        .WithMany("OrchestraConductorEnsembles")
                        .HasForeignKey("OrchestraConductorId")
                        .HasConstraintName("FK_Ensemble_EnsembleMembers_OrhestraConductor");

                    b.Navigation("Composer");

                    b.Navigation("Leader");

                    b.Navigation("OrchestraConductor");
                });

            modelBuilder.Entity("MusicStore.DB.Models.MusicalMetadata", b =>
                {
                    b.HasOne("MusicStore.DB.Models.Performance", "Performance")
                        .WithOne("MusicalMetadata")
                        .HasForeignKey("MusicStore.DB.Models.MusicalMetadata", "PerformanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Performance");
                });

            modelBuilder.Entity("MusicStore.DB.Models.Performance", b =>
                {
                    b.HasOne("MusicStore.DB.Models.Ensemble", "Ensamble")
                        .WithOne("Performance")
                        .HasForeignKey("MusicStore.DB.Models.Performance", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicStore.DB.Models.Music", "Music")
                        .WithMany("Performances")
                        .HasForeignKey("MusicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ensamble");

                    b.Navigation("Music");
                });

            modelBuilder.Entity("MusicStore.DB.Models.Ensemble", b =>
                {
                    b.Navigation("Performance")
                        .IsRequired();
                });

            modelBuilder.Entity("MusicStore.DB.Models.EnsembleMember", b =>
                {
                    b.Navigation("ComposerEnsembles");

                    b.Navigation("LeaderEnsembles");

                    b.Navigation("OrchestraConductorEnsembles");
                });

            modelBuilder.Entity("MusicStore.DB.Models.ManufacturingCompany", b =>
                {
                    b.Navigation("ManufacturedDisks");
                });

            modelBuilder.Entity("MusicStore.DB.Models.Music", b =>
                {
                    b.Navigation("CompactDisks");

                    b.Navigation("Performances");
                });

            modelBuilder.Entity("MusicStore.DB.Models.Performance", b =>
                {
                    b.Navigation("MusicalMetadata")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
